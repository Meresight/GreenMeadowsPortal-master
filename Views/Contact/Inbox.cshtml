@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@using GreenMeadowsPortal.ViewModels
@model ContactInboxViewModel

@{
    ViewData["Title"] = "Message Inbox - Green Meadows Portal";
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Green Meadows | Message Inbox</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="~/css/admin.css">
    <link rel="stylesheet" href="~/css/contact.css">
</head>
<body>
    <div class="wrapper">
        <!-- Sidebar Navigation -->
        <nav id="sidebar" class="sidebar">
            <div class="sidebar-header">
                <h3>Green Meadows</h3>
                <div class="sidebar-logo">GM</div>
            </div>

            <div class="user-profile">
                <div class="user-avatar">
                    <img src="@Model.ProfileImageUrl" alt="User Avatar">
                </div>
                <div class="user-info">
                    <h4>@Model.FirstName</h4>
                    <p>@Model.Role</p>
                </div>
            </div>

            <ul class="sidebar-menu">
                @if (Model.Role == "Admin")
                {
                    <li><a asp-controller="Dashboard" asp-action="AdminDashboard"><i class="fas fa-tachometer-alt"></i> Dashboard</a></li>
                    <li><a asp-controller="Dashboard" asp-action="UserManagement"><i class="fas fa-users"></i> User Management</a></li>
                }
                else if (Model.Role == "Staff")
                {
                    <li><a asp-controller="Dashboard" asp-action="StaffDashboard"><i class="fas fa-tachometer-alt"></i> Dashboard</a></li>
                }
                else
                {
                    <li><a asp-controller="Dashboard" asp-action="HomeownerDashboard"><i class="fas fa-home"></i> Dashboard</a></li>
                }

                <li><a asp-controller="Announcement" asp-action="Index"><i class="fas fa-bullhorn"></i> Announcements</a></li>
                <li><a asp-controller="Dashboard" asp-action="Billing"><i class="fas fa-file-invoice-dollar"></i> Billing</a></li>
                <li><a href="/Facilities"><i class="fas fa-swimming-pool"></i> Facilities</a></li>
                <li><a href="/ServiceRequests"><i class="fas fa-tools"></i> Service Requests</a></li>
                <li><a href="/Documents"><i class="fas fa-file-alt"></i> Documents</a></li>
                <li><a href="/Forum"><i class="fas fa-comments"></i> Community Forum</a></li>
                <li class="active"><a asp-controller="Contact" asp-action="Index"><i class="fas fa-address-book"></i> Contacts</a></li>
                <li><a href="/Events"><i class="fas fa-calendar-alt"></i> Events</a></li>
            </ul>

            <div class="sidebar-footer">
                <a asp-controller="Account" asp-action="Profile"><i class="fas fa-user-cog"></i> Profile</a>
                <a asp-controller="Account" asp-action="Logout"><i class="fas fa-sign-out-alt"></i> Logout</a>
            </div>
        </nav>

        <!-- Main Content -->
        <div class="content-area">
            <!-- Top Navigation -->
            <header class="top-navbar">
                <button id="sidebar-toggle" class="sidebar-toggle">
                    <i class="fas fa-bars"></i>
                </button>

                <div class="back-button">
                    <a asp-controller="Contact" asp-action="Index">
                        <i class="fas fa-arrow-left"></i> Back to Contacts
                    </a>
                </div>

                <div class="navbar-right">
                    <div class="notification-bell">
                        <a asp-controller="Notification" asp-action="Index">
                            <i class="fas fa-bell"></i>
                            <span class="notification-count">@Model.NotificationCount</span>
                        </a>
                    </div>

                    <div class="user-dropdown">
                        <img src="@Model.ProfileImageUrl" alt="User Avatar">
                        <span>@Model.FirstName</span>
                        <i class="fas fa-chevron-down"></i>

                        <div class="dropdown-menu">
                            <a asp-controller="Account" asp-action="Profile"><i class="fas fa-user"></i> My Profile</a>
                            <a href="/Settings"><i class="fas fa-cog"></i> Settings</a>
                            <a asp-controller="Account" asp-action="Logout"><i class="fas fa-sign-out-alt"></i> Logout</a>
                        </div>
                    </div>
                </div>
            </header>

            <!-- Page Content -->
            <main class="main-content">
                <div class="page-header">
                    <h1>@Model.InboxTitle</h1>
                    <nav class="breadcrumb">
                        <a asp-controller="Dashboard" asp-action="@(Model.Role == "Admin" ? "AdminDashboard" : (Model.Role == "Staff" ? "StaffDashboard" : "HomeownerDashboard"))">Dashboard</a> /
                        <a asp-controller="Contact" asp-action="Index">Contact Directory</a> /
                        Inbox
                    </nav>
                </div>

                <!-- Success/Error Messages -->
                @if (TempData["SuccessMessage"] != null)
                {
                    <div class="alert alert-success">
                        <i class="fas fa-check-circle"></i> @TempData["SuccessMessage"]
                        <button class="close-alert"><i class="fas fa-times"></i></button>
                    </div>
                }

                @if (TempData["ErrorMessage"] != null)
                {
                    <div class="alert alert-danger">
                        <i class="fas fa-exclamation-circle"></i> @TempData["ErrorMessage"]
                        <button class="close-alert"><i class="fas fa-times"></i></button>
                    </div>
                }

                <!-- Inbox Container -->
                <div class="inbox-container">
                    <!-- Inbox Sidebar Filters -->
                    <div class="inbox-sidebar">
                        <div class="inbox-filter">
                            <div class="inbox-filter-title">
                                <i class="fas fa-filter"></i> Filter Messages
                            </div>

                            <div class="filter-option active" data-filter="all">
                                <i class="fas fa-envelope"></i> All Messages
                                <span class="filter-count">@Model.Messages.Count</span>
                            </div>

                            <div class="filter-option" data-filter="unread">
                                <i class="fas fa-envelope-open-text"></i> Unread
                                <span class="filter-count">@Model.Messages.Count(m => !m.IsRead)</span>
                            </div>

                            <div class="filter-option" data-filter="sent">
                                <i class="fas fa-paper-plane"></i> Sent
                                <span class="filter-count">@Model.Messages.Count(m => m.IsFromCurrentUser)</span>
                            </div>

                            <div class="filter-option" data-filter="received">
                                <i class="fas fa-inbox"></i> Received
                                <span class="filter-count">@Model.Messages.Count(m => !m.IsFromCurrentUser)</span>
                            </div>

                            @if (Model.Role == "Admin")
                            {
                                <div class="filter-option" data-filter="staff">
                                    <i class="fas fa-user-tie"></i> Staff Messages
                                    <span class="filter-count">
                                        @Model.Messages.Count(m =>
                                                 m.SenderName.Contains("Staff") || m.RecipientName.Contains("Staff"))
                                    </span>
                                </div>

                                <div class="filter-option" data-filter="homeowner">
                                    <i class="fas fa-home"></i> Homeowner Messages
                                    <span class="filter-count">
                                        @Model.Messages.Count(m =>
                                                 m.SenderName.Contains("Homeowner") || m.RecipientName.Contains("Homeowner"))
                                    </span>
                                </div>
                            }
                        </div>

                        <div class="inbox-actions">
                            <a asp-controller="Contact" asp-action="Index" class="btn primary-btn w-100">
                                <i class="fas fa-paper-plane"></i> New Message
                            </a>
                            <form asp-controller="Contact" asp-action="MarkAllAsRead" method="post" class="mt-10">
                                @Html.AntiForgeryToken()
                                <button type="submit" class="btn secondary-btn w-100">
                                    <i class="fas fa-check-double"></i> Mark All as Read
                                </button>
                            </form>

                            @if (Model.CanManageAllMessages)
                            {
                                <form asp-controller="Contact" asp-action="PurgeDeletedMessages" method="post" class="mt-10">
                                    @Html.AntiForgeryToken()
                                    <button type="submit" class="btn danger-btn w-100"
                                            onclick="return confirm('Are you sure you want to permanently delete all removed messages? This action cannot be undone.');">
                                        <i class="fas fa-trash"></i> Purge Deleted Messages
                                    </button>
                                </form>
                            }
                        </div>
                    </div>

                    <!-- Message Listing -->
                    <div class="inbox-main">
                        <div class="inbox-header">
                            <h2><i class="fas fa-envelope"></i> @(Model.Role == "Admin" ? "All Messages" : "Messages")</h2>

                            <div class="inbox-search">
                                <input type="text" id="message-search" placeholder="Search messages...">
                                <button id="search-btn"><i class="fas fa-search"></i></button>
                            </div>
                        </div>

                        @if (Model.Messages != null && Model.Messages.Any())
                        {
                            <div class="message-list" id="message-list">
                                @foreach (var message in Model.Messages)
                                {
                                    <div class="message-item @(!message.IsRead && !message.IsFromCurrentUser ? "unread" : "")" data-type="@(message.IsFromCurrentUser ? "sent" : "received")"
                                         data-role="@(message.SenderName.Contains("Staff") || message.RecipientName.Contains("Staff") ? "staff" :
                 (message.SenderName.Contains("Admin") || message.RecipientName.Contains("Admin") ? "admin" : "homeowner"))">
                                        <div class="message-avatar">
                                            <img src="@(message.IsFromCurrentUser ? message.RecipientProfileImage : message.SenderProfileImage)" alt="User Avatar">
                                        </div>
                                        <div class="message-content">
                                            <div class="message-header">
                                                <div class="message-sender">
                                                    @(message.IsFromCurrentUser ? message.RecipientName : message.SenderName)
                                                </div>
                                                <div class="message-date">
                                                    @message.SentDate.ToString("MMM dd, yyyy h:mm tt")
                                                </div>
                                            </div>
                                            <div class="message-subject">@message.Subject</div>
                                            <div class="message-preview">
                                                @(message.IsFromCurrentUser ? "You: " : "")
                                                <!-- This would be the message preview -->
                                            </div>
                                        </div>
                                        <div class="message-indicators">
                                            @if (!message.IsRead && !message.IsFromCurrentUser)
                                            {
                                                <div class="message-indicator indicator-unread" title="Unread"></div>
                                            }
                                        </div>
                                        <div class="message-actions">
                                            <a asp-controller="Contact" asp-action="ViewMessage" asp-route-id="@message.MessageId" class="message-action" title="View">
                                                <i class="fas fa-eye"></i>
                                            </a>
                                            <form asp-controller="Contact" asp-action="DeleteMessage" asp-route-id="@message.MessageId" method="post" class="d-inline">
                                                @Html.AntiForgeryToken()
                                                <button type="submit" class="message-action" title="Delete" onclick="return confirm('Are you sure you want to delete this message?');">
                                                    <i class="fas fa-trash"></i>
                                                </button>
                                            </form>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="empty-state">
                                <div class="empty-icon">
                                    <i class="fas fa-envelope-open"></i>
                                </div>
                                <h3>No Messages</h3>
                                <p>You don't have any messages yet.</p>
                                <a asp-controller="Contact" asp-action="Index" class="btn primary-btn mt-4">
                                    <i class="fas fa-paper-plane"></i> Send a Message
                                </a>
                            </div>
                        }
                    </div>
                </div>
            </main>

            <!-- Footer -->
            <footer class="main-footer">
                <div class="footer-content">
                    <p>&copy; @DateTime.Now.Year Green Meadows Subdivision. All rights reserved.</p>
                    <div class="footer-links">
                        <a href="/Privacy">Privacy Policy</a>
                        <a href="/Terms">Terms of Service</a>
                        <a href="/Contact">Contact Us</a>
                    </div>
                </div>
            </footer>
        </div>
    </div>

    <!-- JavaScript -->
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Mobile sidebar toggle
            const sidebarToggle = document.getElementById('sidebar-toggle');
            const sidebar = document.getElementById('sidebar');
            if (sidebarToggle && sidebar) {
                sidebarToggle.addEventListener('click', function() {
                    sidebar.classList.toggle('active');
                });
            }

            // User dropdown toggle
            const userDropdown = document.querySelector('.user-dropdown');
            if (userDropdown) {
                userDropdown.addEventListener('click', function(e) {
                    e.stopPropagation();
                    this.querySelector('.dropdown-menu').classList.toggle('show');
                });

                document.addEventListener('click', function(e) {
                    if (!userDropdown.contains(e.target)) {
                        userDropdown.querySelector('.dropdown-menu').classList.remove('show');
                    }
                });
            }

            // Filter options
            const filterOptions = document.querySelectorAll('.filter-option');
            const messageItems = document.querySelectorAll('.message-item');

            filterOptions.forEach(option => {
        option.addEventListener('click', function() {
            // Remove active class from all options
            filterOptions.forEach(opt => opt.classList.remove('active'));

            // Add active class to clicked option
            this.classList.add('active');

            // Get filter value
            const filter = this.getAttribute('data-filter');

            // Filter messages
            messageItems.forEach(item => {
                if (filter === 'all') {
                    item.style.display = 'flex';
                } else if (filter === 'unread') {
                    item.style.display = item.classList.contains('unread') ? 'flex' : 'none';
                } else if (filter === 'sent') {
                    item.style.display = item.getAttribute('data-type') === 'sent' ? 'flex' : 'none';
                } else if (filter === 'received') {
                    item.style.display = item.getAttribute('data-type') === 'received' ? 'flex' : 'none';
                } else if (filter === 'staff') {
                    item.style.display = item.getAttribute('data-role') === 'staff' ? 'flex' : 'none';
                } else if (filter === 'homeowner') {
                    item.style.display = item.getAttribute('data-role') === 'homeowner' ? 'flex' : 'none';
                } else if (filter === 'admin') {
                    item.style.display = item.getAttribute('data-role') === 'admin' ? 'flex' : 'none';
                        }
                    });
                });
            });

            // Message search functionality
            const searchInput = document.getElementById('message-search');
            const searchButton = document.getElementById('search-btn');

            function performSearch() {
                const searchTerm = searchInput.value.toLowerCase();
                const messageList = document.getElementById('message-list');

                if (!messageList) return;

                const messages = messageList.querySelectorAll('.message-item');
                let hasResults = false;

                messages.forEach(message => {
                    const content = message.textContent.toLowerCase();

                    if (content.includes(searchTerm)) {
                        message.style.display = 'flex';
                        hasResults = true;
                    } else {
                        message.style.display = 'none';
                    }
                });

                // Show empty state if no results
                const emptyState = document.querySelector('.empty-state');
                if (emptyState) {
                    emptyState.style.display = hasResults ? 'none' : 'flex';
                }
            }

            if (searchButton) {
                searchButton.addEventListener('click', performSearch);
            }

            if (searchInput) {
                searchInput.addEventListener('keyup', function(e) {
                    if (e.key === 'Enter') {
                        performSearch();
                    }
                });
            }

            // Close alert buttons
            const closeAlerts = document.querySelectorAll('.close-alert');
            closeAlerts.forEach(function(button) {
                button.addEventListener('click', function() {
                    this.closest('.alert').style.display = 'none';
                });
            });

            // Auto-hide alerts after 5 seconds
            setTimeout(function() {
                document.querySelectorAll('.alert').forEach(function(alert) {
                    alert.style.display = 'none';
                });
            }, 5000);
        });
    </script>
</body>
</html>